const bcrypt = require('bcrypt');
const NewsletterModel = require('../models/NewsletterModel');
const nodemailer = require('nodemailer');
require('dotenv').config();

console.log('newsletterController loaded');

// Email validation function
const isValidEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[a-zA-Z]{2,}$/;
  return emailRegex.test(email);
};

// Create transporter for sending confirmation emails
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

const subscribe = async (req, res) => {
  const { email, username, password } = req.body;

  if (!email) return res.status(400).json({ error: 'Email is required' });
  if (!username) return res.status(400).json({ error: 'Username is required' });
  if (!password) return res.status(400).json({ error: 'Password is required' });
  if (!isValidEmail(email)) return res.status(400).json({ error: 'Invalid email format' });

  try {
    const exists = await NewsletterModel.isEmailSubscribed(email);
    if (exists) {
      return res.status(409).json({ message: 'Email is already subscribed' });
    }

    const usernameExists = await NewsletterModel.isUsernameTaken(username);
    if (usernameExists) {
      return res.status(409).json({ message: 'Username is already taken' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const [newSubscriber] = await NewsletterModel.addSubscriber({
      email,
      username,
      password: hashedPassword,
    });

    await transporter.sendMail({
      from: `"Newsletter Team" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: 'Subscription Confirmation',
      text: `Thank you for subscribing to our newsletter!`,
      html: `<p>Hi ${username},</p><p>Thanks for subscribing to our newsletter. You'll now receive updates from us.</p>`,
    });

    res.status(201).json({
      message: 'Subscribed successfully, confirmation email sent',
      subscriber: newSubscriber,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
};

const getSubscribers = async (req, res) => {
  try {
    const subscribers = await NewsletterModel.getAllSubscribers();
    res.json(subscribers);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Server error' });
  }
};

const unsubscribe = async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ error: 'Email is required' });

  try {
    const deleted = await NewsletterModel.deleteSubscriber(email);
    if (deleted === 0) {
      return res.status(404).json({ message: 'Email not found' });
    }
    res.json({ message: 'Unsubscribed successfully' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
};

module.exports = {
  subscribe,
  getSubscribers,
  unsubscribe,
};
